<!doctype html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>${BUILD_NAME}</title>
    <style>body, html {
  font-family: arial;
  margin: 0;
  height: 100%;
  padding: none;
  background-color: #9fcfff;
  overflow: hidden;
}

.emscripten { padding-right: 0; display: block; }
/* the canvas *must not* have any border or padding, or mouse coords will be wrong */
canvas.emscripten { border: 0px none; }

div.emscripten { 
            display: flex;
            flex-direction: column; /* Align items vertically */
            align-items: center; /* Center items horizontally */
}

.title {
	font-size: 25px;
}

.status {
	margin-top: 70vh;
}

progress {
	margin-top: 1vh;
	  width: 500px;
	  height: 20px;
	  border: 1px solid #fff;
	  padding: 2px 5px;
	  background-color: #64A0D7;
}
progress::-moz-progress-bar { background: #376D99; }
progress::-webkit-progress-value { background: #376D99; }
progress { color: #376D99; }
</style>
  </head>
  <body>
    <div class="emscripten" style="height: 100%; width: 100%; display: flex; text-align: center;" id="info">
	<p class="title">Cyao game engine is loading...</p>
        <div class="emscripten status title" id="status">Downloading wasm binary...</div>
        <progress value="50" max="100" id="progress"></progress>
	<p style="margin-top: auto;">Download native versions at <a href="https://github.com/cheyao/opengl/releases">github</a> for better performance</p>
    </div>

    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()" tabindex=-1></canvas>

    <script type='text/javascript'>
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
	window.alert("Phone support isn't compleate, this game is ment to be played on a PC (Like Minecraft Java)");
      } else {
      };

      var statusElement = document.getElementById('status');
      var progressElement = document.getElementById('progress');
      var mainDiv = document.getElementById('info');

      var Module = {
        print: (function() {
          var element = document.getElementById('output');
          if (element) element.value = ''; // clear browser cache
          return (...args) => {
            var text = args.join(' ');
            console.log(text);
            if (element) {
              element.value += text + "\n";
              element.scrollTop = element.scrollHeight; // focus on bottom
            }
          };
        })(),
        canvas: (() => {
          var canvas = document.getElementById('canvas');

          // As a default initial behavior, pop up an alert when webgl context is lost. To make your
          // application robust, you may want to override this behavior before shipping!
          // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
          canvas.addEventListener("webglcontextlost", (e) => { alert('WebGL context lost. You will need to reload the page.'); e.preventDefault(); }, false);

          return canvas;
        })(),
        setStatus: (text) => {
          if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
          if (text === Module.setStatus.last.text) return;
          var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
          var now = Date.now();
          if (m && now - Module.setStatus.last.time < 30) return; // if this is a progress update, skip it if too soon
          Module.setStatus.last.time = now;
          Module.setStatus.last.text = text;
          if (m) {
            text = m[1];
            progressElement.value = parseInt(m[2])*100;
            progressElement.max = parseInt(m[4])*100;
            progressElement.hidden = false;
          } else {
            progressElement.value = null;
            progressElement.max = null;
            progressElement.hidden = true;
            if (!text) progressElement.style.display = 'none';
            if (!text) statusElement.style.display = 'none';
            if (!text) mainDiv.style.display = 'none';
          }
          statusElement.innerHTML = text;
        },
        totalDependencies: 1,
        monitorRunDependencies: (left) => {
          this.totalDependencies = Math.max(this.totalDependencies, left);
          Module.setStatus(left ? 'Downloading wasm binary...' : 'All downloads complete.');
        }
      };
      Module.setStatus('Downloading data...');
      window.onerror = (event) => {
        Module.setStatus('Exception thrown, see JavaScript console');
        Module.setStatus = (text) => {
          if (text) console.error('[post-exception status] ' + text);
        };
      };
    </script>
    <script async type="text/javascript" src="${BUILD_NAME}.js"></script>
  </body>
</html>
