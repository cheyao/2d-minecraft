<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8"/>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <title>${BUILD_NAME}</title>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body, html {
        font-family: Arial, sans-serif;
        height: 100%;
        background-color: #9fcfff;
        overflow: hidden;
      }

      .emscripten-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        height: 100vh;
        text-align: center;
      }

      .title {
        margin-top: 1rem;
        font-size: 1.5rem;
        color: #333;
      }

      .image-frame {
        height: 40vh;
      }

      img {
        height: 100%;
      }

      .status {
        margin-top: 30vh;
        font-size: 1.1rem;
      }

      progress {
        width: 300px;
        max-width: 80vw;
        height: 20px;
        margin-top: 1rem;
        border: 1px solid #fff;
        background-color: #64A0D7;
      }

      progress::-moz-progress-bar {
        background: #376D99;
      }

      progress::-webkit-progress-value {
        background: #376D99;
      }

      .emscripten-canvas-container {
        flex: 1; 
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: auto;
      }

      /* The actual canvas must not have any border or padding, or mouse coords break */
      canvas.emscripten {
        border: none;
        display: block;
      }

      .bottom-note {
        margin-bottom: 1rem;
        font-size: 0.9rem;
      }
    </style>
  </head>

  <body>
    <div class="emscripten-container" id="info">
      <!-- Title and status area -->
      <p class="title">Cyao Game Engine is Loading...</p>

      <div class="image-frame">
        <img src="assets/gura.png" class="picture" alt="Beautiful gura picture eye candy" width="auto" height="25vh">
      </div>

      <div class="status" id="status">Downloading Wasm binary...</div>
      <progress value="50" max="100" id="progress"></progress>

      <p class="bottom-note">
        Download native versions at 
        <a href="https://github.com/cheyao/opengl/releases" target="_blank" rel="noopener noreferrer">GitHub</a> 
        for better performance.
      </p>
    </div>

    <!-- Canvas area -->
    <div class="emscripten-canvas-container">
      <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()" tabindex="-1"></canvas>
    </div>

    <script type="text/javascript">
      // Check for mobile user agent and scream at the user
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
        window.alert("Mobile/Tablet support is not fully complete; this is intended for desktop usage. Please watch video demo.");
      }

      const statusElement   = document.getElementById('status');
      const progressElement = document.getElementById('progress');
      const mainDiv         = document.getElementById('info');

      // Create our Module object for Emscripten (Can't be const)
      var Module = {
        print: (() => {
          const outputElement = document.getElementById('output'); // if any
          if (outputElement) {
            outputElement.value = ''; // Clear any existing text
          }
          return function(...args) {
            const text = args.join(' ');
            console.log(text);
            if (outputElement) {
              outputElement.value += text + "\n";
              outputElement.scrollTop = outputElement.scrollHeight;
            }
          };
        })(),

        canvas: (() => {
          const canvas = document.getElementById('canvas');
          // If WebGL context is lost, alert user
          canvas.addEventListener("webglcontextlost", (e) => {
            alert('WebGL context lost. You may need to reload the page.');
            e.preventDefault();
          }, false);
          return canvas;
        })(),

        // Show a status message to the user
        setStatus: (text) => {
          if (!Module.setStatus.last) {
            Module.setStatus.last = { time: Date.now(), text: '' };
          }
          if (text === Module.setStatus.last.text) return;

          const now = Date.now();
          // If this is a progress update, skip if it floods too quickly
          const match = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
          if (match && (now - Module.setStatus.last.time < 30)) return;

          Module.setStatus.last.time = now;
          Module.setStatus.last.text = text;

          if (match) {
            // If it's a progress line
            text = match[1];
            progressElement.value = parseInt(match[2]) * 100;
            progressElement.max = parseInt(match[4]) * 100;
            progressElement.hidden = false;
          } else {
            // Hide the progress bar if we're done or if there's no progress text
            progressElement.value = null;
            progressElement.max = null;
            progressElement.hidden = true;

            if (!text) {
              progressElement.style.display = 'none';
              statusElement.style.display = 'none';
              mainDiv.style.display = 'none';
            }
          }
          statusElement.innerHTML = text;
        },

        totalDependencies: 1,

        monitorRunDependencies: (left) => {
          Module.totalDependencies = Math.max(Module.totalDependencies, left);
          Module.setStatus(left
            ? 'Downloading wasm binary...'
            : 'All downloads complete.'
          );
        }
      };

      Module.setStatus('Initializing download...');
      window.onerror = (msg) => {
        Module.setStatus('Exception thrown, see JavaScript console for details.');
        // After error, override setStatus to log errors silently or just log in console
        Module.setStatus = (errorText) => {
          console.error('[post-exception status]', errorText);
        };
      };
    </script>

    <!-- Asynchronous JS for Emscripten build. The BUILD_NAME gets replaced in your build system. -->
    <script async type="text/javascript" src="${BUILD_NAME}.js"></script>
  </body>
</html>
